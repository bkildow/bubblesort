<?php
/**
 * @file
 * Bubble sort module.
 *
 * @author Brian Kildow
 */

/**
 * Implements hook_menu().
 */
function bubblesort_menu() {
  $items = array();

  $items['bubblesort'] = array(
    'title' => 'Bubble Sort Simulator',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bubblesort_form'),
    'access arguments' => array('access content'),
  );

  $items['bubblesort_step_data'] = array(
    'title' => 'Bubblesort simulator',
    'page callback' => 'bubblesort_step_callback',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Page callback that delivers the JSON needed for the google chart.
 */
function bubblesort_step_callback() {
  $arr = variable_get('bubblesort_vector');
  $size = count($arr);
  $i = variable_get('bubblesort_i');
  $j = variable_get('bubblesort_j');
  $progress = variable_get('bubblesort_in_progress');

  // Send along some extra info if we have successfully sorted the array.
  if ($progress === 0) {
    drupal_add_http_header('X-sorted', '1');
  }

  bubblesort_generate_json();
  bubblesort_step($i, $size, $j, $arr);
}

/**
 * Generates the json needed for the google chart.
 *
 * @see https://google-developers.appspot.com/chart/interactive/docs/reference
 */
function bubblesort_generate_json() {
  $cols = bubblesort_generate_columns();
  $rows = bubblesort_generate_rows();
  drupal_json_output(array("cols" => $cols, "rows" => $rows));
}

/**
 * Creates the columns needed for conversion into json.
 *
 * @return array
 *   columns array
 */
function bubblesort_generate_columns() {
  $cols = array();
  $cols[] = array(
    "label" => "Level",
    "type" => "string",
  );
  $cols[] = array(
    "label" => "Number",
    "type" => "number",
  );
  $cols[] = array(
    "type" => "string",
    "p" => array("role" => "style"),
  );

  return $cols;
}

/**
 * Creates the rows needed for conversion into json.
 *
 * @return array
 *   row array
 */
function bubblesort_generate_rows() {
  $arr = variable_get('bubblesort_vector');
  $size = count($arr);
  $j = variable_get('bubblesort_j');
  $rows = array();

  for ($k = 0; $k < $size; $k++) {

    $row = array(
      "c" => array(
        array("v" => $arr[$k]),
        array("v" => (int) $arr[$k]),
      ),
    );

    if ($k == $j || $k == ($j + 1)) {
      $row['c'][] = array('v' => 'color: red');
    }
    else {
      $row['c'][] = array('v' => 'color: blue');
    }

    $rows[] = $row;
  }

  return $rows;
}

/**
 * Form builder.
 *
 * @param array $form
 *   Drupal form array
 * @param array $form_state
 *   Drupal form state array
 *
 * @return array
 *   Drupal form array
 */
function bubblesort_form($form, &$form_state) {

  // Load the google charts javascript.
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'bubblesort') . '/bubblesort.js' => array(
      'type' => 'file',
    ),
    'https://www.gstatic.com/charts/loader.js' => array(
      'type' => 'external',
    ),
  );

  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('A Bubble Sort Simulator'),
  );

  $form['chart'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="chart" style="height: 300px;"></div>',
  );

  // Submission controlled through ajax, see javascript file for details.
  $form['step'] = array(
    '#type' => 'submit',
    '#value' => 'Step',
  );

  $form['shuffle'] = array(
    '#type' => 'submit',
    '#value' => 'Shuffle',
    '#submit' => array('bubblesort_form_shuffle_submit'),
  );

  return $form;
}

/**
 * Bubblesort algorithm reference.
 *
 * @param array $arr
 *   array to sort
 *
 * @return array
 *   sorted array
 */
function bubblesort_sort($arr) {
  $size = count($arr);
  for ($i = 0; $i < $size; $i++) {
    for ($j = 0; $j < $size - 1 - $i; $j++) {
      if ($arr[$j + 1] < $arr[$j]) {
        bubblesort_swap($arr, $j, $j + 1);
      }
    }
  }
  return $arr;
}

/**
 * Swaps two array elements.
 *
 * @param array $arr
 *   the array to use
 * @param int $a
 *   element a to swap with b
 * @param int $b
 *   element b to swap with a
 */
function bubblesort_swap(&$arr, $a, $b) {
  $tmp = $arr[$a];
  $arr[$a] = $arr[$b];
  $arr[$b] = $tmp;
}

/**
 * Main algorithm for each step of the bubble sort.
 *
 * @param int $i
 *   index of array
 * @param int $size
 *   size of the array
 * @param int $j
 *   location of the sorter
 * @param array $arr
 *   the array to sort
 */
function bubblesort_step($i, $size, $j, $arr) {
  if ($i < $size) {
    if ($j < $size - 1 - $i) {
      if ($arr[$j + 1] < $arr[$j]) {
        bubblesort_swap($arr, $j, $j + 1);
      }
      $j++;
    }
    else {
      $j = 0;
      $i++;
    }
  }
  else {
    variable_set('bubblesort_in_progress', 0);
  }

  variable_set('bubblesort_vector', $arr);
  variable_set('bubblesort_i', $i);
  variable_set('bubblesort_j', $j);
}


/**
 * Submit handler for shuffling.
 *
 * @param array $form
 *   Drupal form array
 * @param array $form_state
 *   Drupal form array state
 */
function bubblesort_form_shuffle_submit($form, &$form_state) {
  bubblesort_reset();

  drupal_set_message(
    t('You have successfully generated @count numbers, ready to be sorted.',
      array('@count' => variable_get('bubblesort_vector_size')))
  );
}

/**
 * Resets the simulator.
 */
function bubblesort_reset() {
  $size = 10;
  variable_set('bubblesort_vector_size', $size);
  variable_set('bubblesort_vector', bubblesort_shuffle($size));
  variable_set('bubblesort_i', 0);
  variable_set('bubblesort_j', 0);
  variable_set('bubblesort_in_progress', 1);
}

/**
 * Gets an array of random numbers.
 *
 * @param int $number
 *   number in the array
 *
 * @return array
 *   populated array
 */
function bubblesort_shuffle($number = 10) {
  $seed = array();
  for ($i = 1; $i <= $number; $i++) {
    $seed[] = rand(0, 100);
  }

  return $seed;
}
